{
  "hash": "ffcef439d363ec313033b8346b85b7ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"t-SNE and UMAP\"\nformat:\n  html:\n    toc: true\n    toc-location: right\n    number-sections: true\n    code-fold: false\n    sidebar: true\neditor: visual\neditor_options: \n  chunk_output_type: console\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    code-fold: false\n    include: true\n    collapse: true\n    eval: true\n    fig.show: hold\n---\n\n\n\n\n## Introduction\n\nIn this tutorial, we explore two popular nonlinear methods: **t-SNE** (t-distributed Stochastic Neighbor Embedding) and **UMAP** (Uniform Manifold Approximation and Projection).\n\n## t-SNE\n\n**t-SNE** works by computing pairwise similarities between points in high-dimensional space, then finding a low-dimensional embedding that preserves those similarities. It minimizes the divergence between probability distributions using gradient descent. It is particularly good at keeping similar points close together.\n\n**Steps in t-SNE**\n\n1.  Compute pairwise distances between all data points in high-dimensional space.\n2.  Convert distances to conditional probabilities representing similarities.\n3.  Initialize points randomly in 2D or 3D space.\n4.  Compute low-dimensional similarities using a t-distribution.\n5.  Minimize the Kullback-Leibler divergence between the two distributions using gradient descent.\n6.  Update points iteratively to reduce divergence.\n\n## UMAP\n\nUMAP constructs a high-dimensional graph representing the data and then optimizes a low-dimensional projection that preserves both local neighborhoods and some global relationships. It is built on manifold learning and is generally faster than t-SNE, scaling better to large datasets.\n\n**Steps in UMAP**\n\n1.  Compute k-nearest neighbors for each data point.\n2.  Estimate the probability graph based on local distances.\n3.  Construct a fuzzy topological representation of the data.\n4.  Initialize low-dimensional embedding randomly.\n5.  Optimize layout to preserve high-dimensional graph structure in low dimensions using stochastic gradient descent.\n\n## Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\nlibrary(mixOmics)\ndata(breast.TCGA)\n\n# Combine training and test sets\nx <- rbind(breast.TCGA$data.train$mirna, breast.TCGA$data.test$mirna)\nlabels <- factor(c(breast.TCGA$data.train$subtype, breast.TCGA$data.test$subtype))\n\n# Scale the data\nx_scaled <- scale(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(mixOmics)\ndata(breast.TCGA)\n\nx <- rbind(breast.TCGA$data.train$mirna,breast.TCGA$data.test$mirna)\ngroup_labels <-c(breast.TCGA$data.train$subtype,breast.TCGA$data.test$subtype)\n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# data dimensions\nx |> dim() |> print () # dimensions of the data matrix (samples x features)\n## [1] 220 184\ngroup_labels |> as.factor() |> summary() # samples per group\n## Basal  Her2  LumA \n##    66    44   110\n\n# box plots \npar(mfrow=c(2,1))\nboxplot(t(x), main=\"distribution per sample\", las=2, cex.axis=0.7, col=rainbow(10), outline=FALSE, cex.main=0.8)\nboxplot(x, main=\"distribution per miRNA\", las=2, cex.axis=0.7, col=rainbow(10), outline=FALSE, cex.main=0.8)\n\n```\n\n::: {.cell-output-display}\n![Preview of the miRNA data matrix](tSNE-UMAP_files/figure-html/fig-data-preview-1.png){#fig-data-preview width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# perform PCA\npca <- prcomp(x, center=TRUE, scale.=FALSE)\neigs <- pca$sdev^2\nvar_exp <- eigs / sum(eigs)\n\nres_pca <- data.frame(PC1=pca$x[,1], PC2=pca$x[,2], PC3=pca$x[,3], PC4=pca$x[,4], PC5=pca$x[,5]) |>\n    rownames_to_column(\"sample\") |> \n    as_tibble() \n\nres_pca_loadings <- pca$rotation\n\n# show PCA scores plots\np_pca <- res_pca |>\n    ggplot(aes(x=PC1, y=PC2, color=group_labels)) +\n    geom_point() +\n    labs(title=\"PCA of miRNA data\", x=\"PC1\", y=\"PC2\") +\n    xlab(paste(\"PC1 (Var: \", round(var_exp[1] * 100, 2), \"%)\")) +\n    ylab(paste(\"PC2 (Var: \", round(var_exp[2] * 100, 2), \"%)\")) +\n    theme_minimal() +\n    scale_color_manual(values=c(\"Basal\"=\"#FF0000\", \"Her2\"=\"#00FF00\", \"LumA\"=\"#0000FF\")) +\n    theme(legend.title=element_blank())\n\n# show top 10 loadings along PC1\nres_pca_loadings |> \n    as.data.frame() |> \n    rownames_to_column(\"miRNA\") |> \n    arrange(desc(abs(PC1))) |> \n    head(10) |> \n    ggplot(aes(x=reorder(miRNA, PC1), y=PC1)) +\n    geom_bar(stat=\"identity\", fill=\"steelblue\") +\n    coord_flip() +\n    labs(title=\"Top 10 miRNAs contributing to PC1\", x=\"miRNA\", y=\"Loading\") +\n    theme_minimal()\n\n```\n\n::: {.cell-output-display}\n![](tSNE-UMAP_files/figure-html/pca-1.png){width=672}\n:::\n:::\n\n\n\n\n## Run t-SNE\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(Rtsne)\n\nx_scaled <- scale(x) # scale data\n\nset.seed(42)\ntsne_out <- Rtsne(x_scaled, dims = 2, perplexity = 30, verbose = TRUE)\n## Performing PCA\n## Read the 220 x 50 data matrix successfully!\n## Using no_dims = 2, perplexity = 30.000000, and theta = 0.500000\n## Computing input similarities...\n## Building tree...\n## Done in 0.02 seconds (sparsity = 0.563058)!\n## Learning embedding...\n## Iteration 50: error is 57.401944 (50 iterations in 0.02 seconds)\n## Iteration 100: error is 55.085976 (50 iterations in 0.02 seconds)\n## Iteration 150: error is 59.625533 (50 iterations in 0.02 seconds)\n## Iteration 200: error is 58.073568 (50 iterations in 0.02 seconds)\n## Iteration 250: error is 59.120896 (50 iterations in 0.03 seconds)\n## Iteration 300: error is 1.614186 (50 iterations in 0.02 seconds)\n## Iteration 350: error is 1.157171 (50 iterations in 0.02 seconds)\n## Iteration 400: error is 0.940524 (50 iterations in 0.01 seconds)\n## Iteration 450: error is 0.858315 (50 iterations in 0.01 seconds)\n## Iteration 500: error is 0.822199 (50 iterations in 0.01 seconds)\n## Iteration 550: error is 0.783186 (50 iterations in 0.02 seconds)\n## Iteration 600: error is 0.777544 (50 iterations in 0.02 seconds)\n## Iteration 650: error is 0.775445 (50 iterations in 0.02 seconds)\n## Iteration 700: error is 0.775674 (50 iterations in 0.01 seconds)\n## Iteration 750: error is 0.775880 (50 iterations in 0.02 seconds)\n## Iteration 800: error is 0.776062 (50 iterations in 0.01 seconds)\n## Iteration 850: error is 0.776889 (50 iterations in 0.01 seconds)\n## Iteration 900: error is 0.776736 (50 iterations in 0.01 seconds)\n## Iteration 950: error is 0.777065 (50 iterations in 0.01 seconds)\n## Iteration 1000: error is 0.776988 (50 iterations in 0.01 seconds)\n## Fitting performed in 0.34 seconds.\n\n# Key parameters\n# - perplexity: Balances local/global structure (recommended: 5â€“50)\n# - dims: Output dimensions (2D or 3D)\n# - theta: Speed/accuracy tradeoff\n# - max_iter: Iteration count\n\ntsne_df <- data.frame(\n  X = tsne_out$Y[, 1],\n  Y = tsne_out$Y[, 2],\n  Subtype = labels\n)\n\np_tsne <- ggplot(tsne_df, aes(x = X, y = Y, color = Subtype)) +\n  geom_point(size = 2) +\n  theme_minimal() +\n  labs(title = \"t-SNE on miRNA data\") + \n  scale_color_manual(values = c(\"Basal\" = \"#FF0000\", \"Her2\" = \"#00FF00\", \"LumA\" = \"#0000FF\"))\n\nplot(p_tsne)\n\n```\n\n::: {.cell-output-display}\n![](tSNE-UMAP_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Run UMAP\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(umap)\n\nset.seed(42)\numap_out <- umap(x_scaled)\n\n# Key parameters\n# - n_neighbors: Higher = more global structure\n# - min_dist: Smaller = tighter clusters\n# - metric: Distance measure (e.g., \"euclidean\")\n\numap_df <- data.frame(\n  X = umap_out$layout[, 1],\n  Y = umap_out$layout[, 2],\n  Subtype = labels\n)\n\np_umap <- ggplot(umap_df, aes(x = X, y = Y, color = Subtype)) +\n  geom_point(size = 2) +\n  theme_minimal() +\n  labs(title = \"UMAP on miRNA data\") + \n  scale_color_manual(values = c(\"Basal\" = \"#FF0000\", \"Her2\" = \"#00FF00\", \"LumA\" = \"#0000FF\"))\n\nplot(p_umap)\n```\n\n::: {.cell-output-display}\n![](tSNE-UMAP_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## Compare PCA, t-SNE, and UMAP\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(patchwork)\np_pca + p_tsne + p_umap + plot_layout(ncol = 2)\n```\n\n::: {.cell-output-display}\n![](tSNE-UMAP_files/figure-html/unnamed-chunk-7-1.png){width=1152}\n:::\n:::\n\n\n\n\n## Exercise (parameters exploration)\n\nTry changing perplexity = 5, 50 in t-SNE. Try n_neighbors = 5, 30 in UMAP. Do you see different patterns? Why? Repeat the exercise with different random seed. Are t-SNE and UMAP sensitive to random initialization?\n\n**Example code**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# t-SNE with perplexity = 10\nset.seed(42)\ntsne_5 <- Rtsne(x_scaled, dims = 2, perplexity = 5)\ndf_tsne5 <- data.frame(X = tsne_5$Y[,1], Y = tsne_5$Y[,2], Subtype = labels)\n\n# t-SNE with perplexity = 50\nset.seed(42)\ntsne_50 <- Rtsne(x_scaled, dims = 2, perplexity = 50)\ndf_tsne50 <- data.frame(X = tsne_50$Y[,1], Y = tsne_50$Y[,2], Subtype = labels)\n\nset.seed(42)\n# UMAP with n_neighbors = 5\numap_5 <- umap(x_scaled, config = modifyList(umap.defaults, list(n_neighbors = 5)))\ndf_umap5 <- data.frame(X = umap_5$layout[,1], Y = umap_5$layout[,2], Subtype = labels)\n\nset.seed(42)\n# UMAP with n_neighbors = 30\numap_30 <- umap(x_scaled, config = modifyList(umap.defaults, list(n_neighbors = 30)))\ndf_umap30 <- data.frame(X = umap_30$layout[,1], Y = umap_30$layout[,2], Subtype = labels)\n\n# Plot\nlibrary(patchwork)\np1 <- ggplot(df_tsne5, aes(X, Y, color = Subtype)) + geom_point() +\n  ggtitle(\"t-SNE (perplexity = 5)\") + theme_minimal()\n\np2 <- ggplot(df_tsne50, aes(X, Y, color = Subtype)) + geom_point() +\n  ggtitle(\"t-SNE (perplexity = 50)\") + theme_minimal()\n\np3 <- ggplot(df_umap5, aes(X, Y, color = Subtype)) + geom_point() +\n  ggtitle(\"UMAP (n_neighbors = 5)\") + theme_minimal()\n\np4 <- ggplot(df_umap30, aes(X, Y, color = Subtype)) + geom_point() +\n  ggtitle(\"UMAP (n_neighbors = 30)\") + theme_minimal()\n\np1 + p2 + p3 + p4\n\n# Comments: \n\n# The comparison across parameter settings highlights how both t-SNE and UMAP balance local versus global structure depending on configuration:\n# t-SNE (perplexity = 10):\n# Shows very tight, localized groupings. Clusters are more fragmented, suggesting a strong focus on very close neighbors.\n# t-SNE (perplexity = 50):\n# Produces more continuous global structure. Classes are generally separated, but the fine local detail is smoothed out.\n# UMAP (n_neighbors = 5):\n# Strong emphasis on local clusters, resulting in a scattered, detailed structure with visible subgrouping. This may help detect subtypes or sub-clusters.\n# UMAP (n_neighbors = 30):\n# Prioritizes global structure. The major subtypes (Basal, Her2, LumA) appear as smoother, larger clusters, giving a clearer big-picture overview.\n\n# Both t-SNE and UMAP are sensitive to the random seed because they rely on random initialization and stochastic optimization to construct the low-dimensional embedding. t-SNE is generally more sensitive because its cost function is non-convex and it places stronger emphasis on preserving local structure, making it more prone to variability in point arrangement across runs\n\n```\n\n::: {.cell-output-display}\n![](tSNE-UMAP_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## Exercise (features variability)\n\nInvestigate which miRNA features vary the most across the dataset. Features with high variance are more likely to influence clustering in dimensionality reduction. Identify top variable features in orginal (unscaled) data and visualize sample distribution colored by expression of top feature on the selected t-SNE and UMAP plots.\n\n**Example code**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(viridis)\n\n# Compute variance for each feature (column-wise)\nfeature_variance <- apply(x, 2, var)\ntop_features <- sort(feature_variance, decreasing = TRUE)[1:5]\nprint(top_features)\n##    hsa-mir-9-1    hsa-mir-9-2    hsa-mir-205    hsa-mir-375 hsa-mir-196a-1 \n##       5.911005       5.898993       5.859463       4.549581       4.480415\n\n# Visualize first top feature\ntop_feature <- names(top_features)[1]\n\n# t-SNE (perplexity = 5)\ntsne_5 <- Rtsne(x_scaled, dims = 2, perplexity = 5)\ndf_tsne5 <- data.frame(X = tsne_5$Y[,1], Y = tsne_5$Y[,2], Subtype = labels, TopFeature =  x[, top_feature])\n\n# UMAP (n_neighbors = 5)\numap_5 <- umap(x_scaled, config = modifyList(umap.defaults, list(n_neighbors = 5)))\ndf_umap5 <- data.frame(X = umap_5$layout[,1], Y = umap_5$layout[,2], Subtype = labels, TopFeature =  x[, top_feature])\n\np1 <- ggplot(df_tsne5, aes(x = X, y = Y, color = TopFeature, size = TopFeature)) +\n  geom_point() +\n  scale_color_viridis_c(option = \"C\") +\n  theme_minimal() +\n  labs(title = paste(\"t-SNE colored by expression of\", top_feature),\n       color = top_feature)\n\np2 <- ggplot(df_umap5, aes(x = X, y = Y, color = TopFeature, size = TopFeature)) +\n  geom_point() +\n  scale_color_viridis_c(option = \"C\") +\n  theme_minimal() +\n  labs(title = paste(\"UMAP colored by expression of\", top_feature),\n       color = top_feature)\n\np1 + p2\n\n```\n\n::: {.cell-output-display}\n![](tSNE-UMAP_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Additional resources\n\n-   [How to use t-SNE effectively](https://distill.pub/2016/misread-tsne/)\n-   [Understanding UMAP](https://pair-code.github.io/understanding-umap/)\n",
    "supporting": [
      "tSNE-UMAP_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}