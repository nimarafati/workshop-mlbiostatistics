---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Introduction

- Throughout the course, we have seen steps that are common in machine learning workflows, such as data cleaning, feature selection, data splitting, model training, tuning, and evaluation.

- It is valuable to know how to code each step manually, using basic functions or selected R packages. The advantage of this approach is that it gives a deep understanding of the process and full control over each step.

- An alternative approach is to follow a structured pipeline using established frameworks. The advantages here include faster setup, easier experimentation with different algorithms, and better collaboration. A structured pipeline also reduces the risk of data leakage and model overfitting.

- To help streamline this process, several frameworks have been developed in R, like `caret` package and lately the `tidymodels` framework.

- While tidymodels is the most widely used and tidyverse-friendly ML framework in R, other modern options exist. For instance `mlr3` offers a highly modular, object-oriented design suited for advanced tasks like benchmarking and custom pipelines. For deep learning, `torch` and its high-level interface `luz` bring native PyTorch support to R. 

- Here, we will see how to build a predictive models, including all the steps, to predict BMI based on the features from the diabetes dataset. We will try to code things ourselves and see how to put everything together using tidymodels. 


## Tidymodels

- One of the earlier initiatives to create a framwork for ML tasks in R was the `caret` package, led by Max Kuhn, which unified many modeling tools and provided support for preprocessing, resampling, and parameter tuning. `Caret`was an early and widely-used framework that provided tools for preprocessing, resampling, and cross-validation.

- Building on this foundation, Kuhn partnered with Hadley Wickham, the creator of the `tidyverse`, to introduce the `tidymodels` ecosystem in 2020: a modern, modular collection of R packages that applies **tidyverse principles** to make machine learning workflows more intuitive, readable, and consistent.


| core package                                 | function                                                                                                                                                                    |
|-----------------|-------------------------------------------------------|
| ![](images/image-1434058929.png){width="80"} | provides infrastructure for efficient data splitting and resampling                                                                                                         |
| ![](images/image-849580063.png){width="80"}  | parsnip is a tidy, unified interface to models that can be used to try a range of models without getting bogged down in the syntactical minutiae of the underlying packages |
| ![](images/image-1485488765.png){width="80"} | recipes is a tidy interface to data pre-processing tools for feature engineering                                                                                            |
| ![](images/image-328218611.png){width="80"}  | workflows bundle your pre-processing, modeling, and post-processing together                                                                                                |
| ![](images/image-1827784270.png){width="80"} | tune helps you optimize the hyperparameters of your model and pre-processing steps                                                                                          |
| ![](images/image-229955045.png){width="80"}  | yardstick measures the effectiveness of models using performance metrics                                                                                                    |

: Some of the core packages under \`tidymodels\` framework https://www.tidymodels.org


## References {-}
::: {#refs}
:::

<!-- filtering non-informative features (variance threshold, univariate etc.) -->

<!-- filtering redundant features (e.g. by assessing correlation structure) -->

<!-- feature selection using outcome incl. cross validation (with Lasso / Elastic Nets). -->
